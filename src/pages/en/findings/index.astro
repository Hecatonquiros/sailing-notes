---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import ArrowCard from "@components/ArrowCard.astro";
import { METADATA } from "@consts";

const data = (await getCollection("findings"))
  .filter(finding => !finding.data.draft && finding.data.lang === 'en')
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  
type Acc = {
  [year: string]: CollectionEntry<"findings">[];
}

const findings = data.reduce((acc: Acc, finding) => {
    const year = finding.data.date.getFullYear().toString();
    if (!acc[year]) {
      acc[year] = [];
    }
    acc[year].push(finding);
    return acc;
  }, {});

const years = Object.keys(findings).sort((a, b) => parseInt(b) - parseInt(a)); 
---

<PageLayout title={METADATA.findings.en.TITLE} description={METADATA.findings.en.DESCRIPTION}>
  <Container>
    <div class="space-y-10">
      <div class="animate font-semibold text-black dark:text-white">
        Findings
      </div>
      <div class="space-y-4">
        {years.map(year => (
          <section class="animate space-y-4">
            <div class="font-semibold text-black dark:text-white">
              {year}
            </div>
            <div>
              <ul class="flex flex-col gap-4">
                {
                  findings[year].map((finding) => (
                    <li>
                      <ArrowCard entry={finding}/>
                    </li>
                  ))
                }
              </ul>
            </div>
          </section>
        ))}
      </div>
    </div>
  </Container>
</PageLayout>
